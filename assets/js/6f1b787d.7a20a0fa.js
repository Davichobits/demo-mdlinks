"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[938],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,k=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8574:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},i="Hito 1",s={unversionedId:"hitos/hito-1",id:"hitos/hito-1",title:"Hito 1",description:"Javascript API",source:"@site/docs/hitos/hito-1.md",sourceDirName:"hitos",slug:"/hitos/hito-1",permalink:"/demo-mdlinks/docs/hitos/hito-1",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/hitos/hito-1.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Hitos",permalink:"/demo-mdlinks/docs/category/hitos"},next:{title:"Hito 2",permalink:"/demo-mdlinks/docs/hitos/hito-2"}},l={},u=[{value:"Javascript API",id:"javascript-api",level:2},{value:"Test unitarios",id:"test-unitarios",level:2},{value:"Tareas de este hito",id:"tareas-de-este-hito",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"hito-1"},"Hito 1"),(0,a.kt)("h2",{id:"javascript-api"},"Javascript API"),(0,a.kt)("p",null,"Comienza haciendo la versi\xf3n m\xe1s sencilla de mdlinks. Crea una funci\xf3n que devuelva una promesa con los links encontrados dentro de un archivo markdown espec\xedfico."),(0,a.kt)("p",null,"Esta funci\xf3n debe ser un m\xf3dulo que puede ",(0,a.kt)("strong",{parentName:"p"},"importarse")," en otros scripts de Node.js y debe ofrecer la siguiente interfaz:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mdLinks(path)")),(0,a.kt)("p",null,"Argumento:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"path"),": Ruta ",(0,a.kt)("strong",{parentName:"li"},"absoluta")," o ",(0,a.kt)("strong",{parentName:"li"},"relativa")," al ",(0,a.kt)("strong",{parentName:"li"},"archivo")," o ",(0,a.kt)("strong",{parentName:"li"},"directorio"),".\nSi la ruta pasada es relativa, debe resolverse como relativa al directorio desde donde se invoca node (transformar a absoluta).")),(0,a.kt)("p",null,"Valor de retorno:"),(0,a.kt)("p",null,"La funci\xf3n ",(0,a.kt)("inlineCode",{parentName:"p"},"mdLinks(path)")," debe ",(0,a.kt)("strong",{parentName:"p"},"retornar una promesa")," que ",(0,a.kt)("strong",{parentName:"p"},"resuelva a un arreglo de objetos"),", donde cada objeto representa un link y contiene las siguientes propiedades:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"href"),": URL encontrada."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"text"),": Texto que aparec\xeda dentro del link."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"file"),": Ruta del archivo donde se encontr\xf3 el link.")),(0,a.kt)("p",null,"Ejemplo:"),(0,a.kt)("p",null,"(resultados como comentarios)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const mdLinks = require("md-links");\n\nmdLinks("./some/example.md")\n  .then(links => {\n    // => [{ href, text, file }, ...]\n  })\n  .catch(console.error);\n')),(0,a.kt)("h2",{id:"test-unitarios"},"Test unitarios"),(0,a.kt)("p",null,"Los tests unitarios son una excelente forma de verificar si tus funciones est\xe1n funcionando correctamente mientras escribes el c\xf3digo. En este proyecto, recuerda que no hay una interfaz gr\xe1fica de navegador, por lo tanto para poderlo probar es necesario recurrir a los test unitarios. "),(0,a.kt)("p",null,"Por ejemplo, es recomendable escribir tests que invoquen la funci\xf3n ",(0,a.kt)("inlineCode",{parentName:"p"},"mdLinks")," y comprueben que esta funci\xf3n resuelva con un arreglo con la informaci\xf3n esperada. Tambi\xe9n es importante probar las otras funciones que hayas escrito en tu c\xf3digo. "),(0,a.kt)("p",null,"Ejemplo:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"describe('mdLinks', () => {\n  it('deber\xeda retornar un arreglo con 3 links para un archivo .md con 3 links', ()=>{\n    return mdLinks('miArchivo.md').then((result) => {\n      expect...\n    });\n  });\n});\n\n")),(0,a.kt)("h2",{id:"tareas-de-este-hito"},"Tareas de este hito"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Crea una promesa")),(0,a.kt)("p",null,"El valor de retorno de nuestra librer\xeda es una Promesa, no un array (la promesa resuelve un array). Prueba leyendo sobre las promesas y creando una por tu cuenta utilizando ",(0,a.kt)("inlineCode",{parentName:"p"},"new Promise()")),(0,a.kt)("p",null,"  Es importante que sepas qu\xe9 es un callback pues las promesas los utilizar\xe1n."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Lee un archivo"),(0,a.kt)("p",{parentName:"li"},"Empieza leyendo un solo archivo con una ruta fija y retorna su contenido. Para ver este contenido puedes utilizar un ",(0,a.kt)("inlineCode",{parentName:"p"},"console.log()")," al momento de ejecutar la funci\xf3n."))),(0,a.kt)("p",null,"El m\xf3dulo ",(0,a.kt)("inlineCode",{parentName:"p"},"fs")," (FileSystem) te ser\xe1 de utilidad. Como mencionamos en las consideraciones t\xe9cnicas, preferimos que uses ",(0,a.kt)("inlineCode",{parentName:"p"},"readFile")," (en lugar de ",(0,a.kt)("inlineCode",{parentName:"p"},"readFileSync"),") y recomendamos el m\xf3dulo ",(0,a.kt)("inlineCode",{parentName:"p"},"fs/promises")," para utilizar estas funciones con promesas."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Aseg\xfarate que el archivo es markdown"),(0,a.kt)("p",{parentName:"li"},"Ya sabiendo leer un archivo, avent\xfarate a conocer cu\xe1l es su extensi\xf3n."),(0,a.kt)("p",{parentName:"li"},"Recuerda, las extensiones son esas letras al final del nombre de un archivo, por ejemplo: .js, .txt, .doc, etc"),(0,a.kt)("p",{parentName:"li"},"Aqu\xed podr\xe1 ser \xfatil el m\xf3dulo ",(0,a.kt)("inlineCode",{parentName:"p"},"path"),"."),(0,a.kt)("p",{parentName:"li"},"En caso de que la extensi\xf3n del archivo no sea md, la promesa de la funci\xf3n mdLinks deber\xeda rechazarse con un error."))),(0,a.kt)("hr",null),(0,a.kt)("admonition",{title:"No olvides los tests",type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Antes de pasar al siguiente hito, aseg\xfarate de escribir los tests correspondientes al c\xf3digo del hito actual.")))}d.isMDXComponent=!0}}]);