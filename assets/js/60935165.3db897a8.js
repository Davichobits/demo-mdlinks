"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[779],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),c=r,k=d["".concat(l,".").concat(c)]||d[c]||m[c]||o;return t?a.createElement(k,i(i({ref:n},u),{},{components:t})):a.createElement(k,i({ref:n},u))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},1809:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:1},i="Hito 1",s={unversionedId:"milestones/milestone1",id:"milestones/milestone1",title:"Hito 1",description:"Javascript API",source:"@site/docs/milestones/milestone1.md",sourceDirName:"milestones",slug:"/milestones/milestone1",permalink:"/demo-mdlinks/milestones/milestone1",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/milestones/milestone1.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Hitos",permalink:"/demo-mdlinks/category/hitos"},next:{title:"Hito 2",permalink:"/demo-mdlinks/milestones/milestone2"}},l={},p=[{value:"Javascript API",id:"javascript-api",level:2},{value:"Tareas de este hito",id:"tareas-de-este-hito",level:2}],u={toc:p},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hito-1"},"Hito 1"),(0,r.kt)("h2",{id:"javascript-api"},"Javascript API"),(0,r.kt)("p",null,"Comienza haciendo la versi\xf3n m\xe1s sencilla de ",(0,r.kt)("inlineCode",{parentName:"p"},"mdlinks"),". Crea una funci\xf3n que\ndevuelva una promesa con los links encontrados dentro de un archivo markdown\nespec\xedfico."),(0,r.kt)("p",null,"Esta funci\xf3n debe ser un m\xf3dulo que puede ",(0,r.kt)("strong",{parentName:"p"},"importarse")," en otros scripts de\nNode.js y debe ofrecer la siguiente interfaz:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"mdLinks(path)")),(0,r.kt)("p",null,"Argumento:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path"),": Ruta ",(0,r.kt)("strong",{parentName:"li"},"absoluta")," o ",(0,r.kt)("strong",{parentName:"li"},"relativa")," al ",(0,r.kt)("strong",{parentName:"li"},"archivo")," o ",(0,r.kt)("strong",{parentName:"li"},"directorio"),".\nSi la ruta pasada es relativa, debe resolverse como relativa al directorio\ndesde donde se invoca node (transformar a absoluta).")),(0,r.kt)("p",null,"Valor de retorno:"),(0,r.kt)("p",null,"La funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"mdLinks(path)")," debe ",(0,r.kt)("strong",{parentName:"p"},"retornar una promesa")," que ",(0,r.kt)("strong",{parentName:"p"},"resuelva a un"),"\n",(0,r.kt)("strong",{parentName:"p"},"arreglo de objetos"),", donde cada objeto representa un link y contiene las\nsiguientes propiedades:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"href"),": URL encontrada."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"text"),": Texto que aparec\xeda dentro del link."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"file"),": Ruta del archivo donde se encontr\xf3 el link.")),(0,r.kt)("p",null,"Ejemplo:"),(0,r.kt)("p",null,"(resultados como comentarios)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const mdLinks = require("md-links");\n\nmdLinks("./some/example.md")\n  .then(links => {\n    // => [{ href, text, file }, ...]\n  })\n  .catch(console.error);\n')),(0,r.kt)("p",null,"Test unitarios:"),(0,r.kt)("p",null,"Los tests unitarios son una excelente forma de verificar si tus funciones est\xe1n\nfuncionando correctamente mientras escribes el c\xf3digo. En este proyecto,\nrecuerda que no hay una interfaz gr\xe1fica de navegador, por lo tanto para\npoderlo probar es necesario recurrir a los test unitarios."),(0,r.kt)("p",null,"Recuerda que es muy importante testear tus funciones puras, mientras\nescribes la funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"mdLinks"),". Y cuando \xe9sta est\xe9 terminada, tambi\xe9n deber\xe1s\ntestearla  al final asegur\xe1ndote que resuelva un arreglo con la\ninformaci\xf3n esperada."),(0,r.kt)("p",null,"Ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"\ndescribe('mdLinks', () => {\n  it('deber\xeda resolver un arreglo con 3 links para un archivo .md con 3 links', ()=>{\n    return mdLinks('miArchivo.md').then((result) => {\n      expect...;\n    });\n  });\n});\n\n")),(0,r.kt)("h2",{id:"tareas-de-este-hito"},"Tareas de este hito"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Crea una promesa"),(0,r.kt)("p",{parentName:"li"},"El valor de retorno de nuestra librer\xeda es una ",(0,r.kt)("em",{parentName:"p"},"Promesa")," que resuelve un\n",(0,r.kt)("em",{parentName:"p"},"array"),". Prueba leyendo sobre las promesas y creando una por tu cuenta\nutilizando ",(0,r.kt)("inlineCode",{parentName:"p"},"new Promise()")),(0,r.kt)("p",{parentName:"li"},"Es importante que sepas qu\xe9 es un callback pues las promesas los utilizar\xe1n.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Transforma la ruta ingresada a absoluta"),(0,r.kt)("p",{parentName:"li"},"Los m\xf3dulos de node.js que utilizar\xe1s despu\xe9s, trabajan con rutas absolutas.\nEntonces, si a la funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"mdlinks()"),", se le pasa una ruta relativa, debes\nconvertirla a absoluta primero. Puedes valerte del m\xf3dulo ",(0,r.kt)("inlineCode",{parentName:"p"},"path"),", con su\nm\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"resolve()"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Comprueba que la ruta existe en el computador"),(0,r.kt)("p",{parentName:"li"},"Una vez que tienes la ruta absoluta, aseg\xfarate que la ruta exista en el\ncomputador. Este paso es importante, ya que si la ruta ingresada es erronea\nla funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"mdLinks()")," deber\xe1 rechazarse con un error.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Aseg\xfarate que el archivo es markdown"),(0,r.kt)("p",{parentName:"li"},"Como la ruta que se utilizar\xe1 para este hito, ser\xe1 la ruta de un archivo\nen espec\xedfico, avent\xfarate a conocer cu\xe1l es su extensi\xf3n."),(0,r.kt)("p",{parentName:"li"},"Recuerda, las extensiones son esas letras al final del nombre de un archivo,\npor ejemplo: .js, .txt, .doc, etc"),(0,r.kt)("p",{parentName:"li"},"Aqu\xed podr\xe1 ser \xfatil el m\xf3dulo ",(0,r.kt)("inlineCode",{parentName:"p"},"path"),"."),(0,r.kt)("p",{parentName:"li"},"En caso de que la extensi\xf3n del archivo no sea md, la promesa de la funci\xf3n\nmdLinks deber\xeda rechazarse con un error.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Lee un archivo"),(0,r.kt)("p",{parentName:"li"},"Ahora que sabes que el archivo es del tipo markdown, lee este archivo y\nretorna su contenido. Para ver este contenido puedes utilizar un\n",(0,r.kt)("inlineCode",{parentName:"p"},"console.log()")," al momento de ejecutar la funci\xf3n."),(0,r.kt)("p",{parentName:"li"},"El m\xf3dulo ",(0,r.kt)("inlineCode",{parentName:"p"},"fs")," (FileSystem) te ser\xe1 de utilidad. Como mencionamos en las\nconsideraciones t\xe9cnicas, preferimos que uses ",(0,r.kt)("inlineCode",{parentName:"p"},"readFile")," (en lugar de\n",(0,r.kt)("inlineCode",{parentName:"p"},"readFileSync"),") y recomendamos el m\xf3dulo ",(0,r.kt)("inlineCode",{parentName:"p"},"fs/promises")," para utilizar estas\nfunciones con promesas.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Encuentra los links dentro del documento."),(0,r.kt)("p",{parentName:"li"},"Una vez tienes acceso al contenido del archivo, extrae los links que\nencuentres dentro del mismo. Estos links los tendr\xe1s que armar dentro de un\narreglo para que la funci\xf3n de mdLinks los pueda resolver."))),(0,r.kt)("admonition",{title:"No olvides los tests",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Antes de pasar al siguiente hito, aseg\xfarate de escribir los tests correspondientes al c\xf3digo del hito actual.")))}m.isMDXComponent=!0}}]);